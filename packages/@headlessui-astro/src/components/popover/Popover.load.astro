---
// Popover.load.astro - Eager hydration variant with client:load
import type { PopoverProps } from '../../types/popover';
import { EAGER_HYDRATION } from '../../core/hydration';

// Destructure props with defaults
const { 
  as = 'div', 
  open = false,
  ...rest 
} = Astro.props as PopoverProps;

// Generate unique ID for accessibility
const popoverId = `headlessui-popover-${Math.random().toString(36).substring(2, 9)}`;

// Explicitly use the HTML tag based on the as prop
const Tag = as;
---

{as === 'div' ? (
  <div 
    id={popoverId}
    data-headlessui-popover
    data-headlessui-state={open ? 'open' : ''}
    {...rest}
    client:load
  >
    <slot />
    
    <script>
      // Initialize component via client-side script
      // This script will be included once per component type
      import { createPopoverContext } from './popover-client';
      
      // Initialize all popover components when the DOM is ready
      document.addEventListener('astro:page-load', () => {
        document.querySelectorAll('[data-headlessui-popover]').forEach(element => {
          if (element instanceof HTMLElement) {
            createPopoverContext(element);
          }
        });
      });
    </script>
  </div>
) : (
  <Tag 
    id={popoverId}
    data-headlessui-popover
    data-headlessui-state={open ? 'open' : ''}
    {...rest}
    client:load
  >
    <slot />
    
    <script>
      // Initialize component via client-side script
      // This script will be included once per component type
      import { createPopoverContext } from './popover-client';
      
      // Initialize all popover components when the DOM is ready
      document.addEventListener('astro:page-load', () => {
        document.querySelectorAll('[data-headlessui-popover]').forEach(element => {
          if (element instanceof HTMLElement) {
            createPopoverContext(element);
          }
        });
      });
    </script>
  </Tag>
)}