---
import Layout from '../../layouts/Layout.astro';
import ExampleWrapper from '../../components/ExampleWrapper.astro';
import { Listbox, ListboxButton, ListboxOptions, ListboxOption, ListboxLabel } from '@headlessui/astro';

const people = [
  { id: 1, name: 'Wade Cooper' },
  { id: 2, name: 'Arlene Mccoy' },
  { id: 3, name: 'Devon Webb' },
  { id: 4, name: 'Tom Cook' },
  { id: 5, name: 'Tanya Fox' },
  { id: 6, name: 'Hellen Schmidt' },
];

const selectedPeople = [people[0], people[3]];

const sourceCode = `
<Listbox as="div" class="relative mt-1 w-72" value={selectedPeople} multiple>
  <ListboxLabel class="block text-sm font-medium text-gray-700">
    Assigned members
  </ListboxLabel>
  
  <div class="relative mt-1">
    <ListboxButton class="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
      <span class="block truncate" id="selected-people">
        {selectedPeople.map(person => person.name).join(', ')}
      </span>
      <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </span>
    </ListboxButton>

    <ListboxOptions class="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
      {people.map((person) => (
        <ListboxOption
          key={person.id}
          value={person}
          class="relative cursor-default select-none py-2 pl-10 pr-4 ui-active:bg-blue-100 ui-active:text-blue-900 ui-selected:bg-blue-50"
        >
          {({ active, selected }) => (
            <>
              <span class:list={["block truncate", selected ? "font-medium" : "font-normal"]}>
                {person.name}
              </span>
              {selected && (
                <span class:list={["absolute inset-y-0 left-0 flex items-center pl-3", active ? "text-blue-600" : "text-blue-600"]}>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </span>
              )}
            </>
          )}
        </ListboxOption>
      ))}
    </ListboxOptions>
  </div>
</Listbox>

<script>
  // Handle selection change
  document.addEventListener('listbox:change', (event) => {
    if (event.target) {
      // Get the selected values from the custom event
      const selectedValues = event.detail?.value;
      
      // Update the display (in a real app you might want to use a reactive framework)
      if (Array.isArray(selectedValues)) {
        const displayElement = document.getElementById('selected-people');
        if (displayElement) {
          const names = selectedValues.map(person => person.name).join(', ');
          displayElement.textContent = names || 'None selected';
        }
      }
    }
  });
</script>
`;
---

<Layout title="Multi-Select Listbox - HeadlessUI Astro Playground">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Multi-Select Listbox</h1>
    <p class="mb-8 text-gray-700">
      This example demonstrates a multi-select listbox that allows users to select multiple options
      from a list. It's ideal for assigning multiple team members, selecting multiple categories, etc.
    </p>

    <ExampleWrapper 
      title="Multi-Select Listbox Example" 
      description="A listbox that allows multiple selections with the 'multiple' prop."
      source={sourceCode}
    >
      <Listbox as="div" class="relative mt-1 w-72" value={selectedPeople} multiple>
        <ListboxLabel class="block text-sm font-medium text-gray-700">
          Assigned members
        </ListboxLabel>
        
        <div class="relative mt-1">
          <ListboxButton class="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
            <span class="block truncate" id="selected-people">
              {selectedPeople.map(person => person.name).join(', ')}
            </span>
            <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </span>
          </ListboxButton>

          <ListboxOptions class="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
            {people.map((person) => (
              <ListboxOption
                key={person.id}
                value={person}
                class="relative cursor-default select-none py-2 pl-10 pr-4 ui-active:bg-blue-100 ui-active:text-blue-900 ui-selected:bg-blue-50"
              >
                {({ active, selected }) => (
                  <>
                    <span class:list={["block truncate", selected ? "font-medium" : "font-normal"]}>
                      {person.name}
                    </span>
                    {selected && (
                      <span class:list={["absolute inset-y-0 left-0 flex items-center pl-3", active ? "text-blue-600" : "text-blue-600"]}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                      </span>
                    )}
                  </>
                )}
              </ListboxOption>
            ))}
          </ListboxOptions>
        </div>
      </Listbox>

      <script>
        // Handle selection change
        document.addEventListener('listbox:change', (event) => {
          if (event.target) {
            // Get the selected values from the custom event
            const selectedValues = event.detail?.value;
            
            // Update the display (in a real app you might want to use a reactive framework)
            if (Array.isArray(selectedValues)) {
              const displayElement = document.getElementById('selected-people');
              if (displayElement) {
                const names = selectedValues.map(person => person.name).join(', ');
                displayElement.textContent = names || 'None selected';
              }
            }
          }
        });
      </script>
    </ExampleWrapper>

    <div class="mt-8 p-4 bg-blue-50 rounded-lg">
      <h2 class="text-lg font-semibold text-blue-800">Multi-Select Implementation</h2>
      <ul class="mt-2 space-y-2 text-sm text-blue-700">
        <li>• Add the <code>multiple</code> prop to the Listbox component</li>
        <li>• The value prop should be an array of selected items</li>
        <li>• Click an already selected item to deselect it</li>
        <li>• The <code>listbox:change</code> event detail value will be an array</li>
        <li>• Use different styling for the multi-select (blue instead of amber in this example)</li>
        <li>• The Listbox stays open after selection to allow selecting multiple items</li>
        <li>• Keyboard navigation works the same as single select</li>
      </ul>
    </div>
  </div>
</Layout>